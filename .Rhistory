URL <- "https://www.google.com/url?q=https://s3.amazonaws.com/udacity-hosted-downloads/ud651/wineQualityReds.csv&sa=D&ust=1557008121325000"
# If data set not downloaded already, fetch it
if (!file.exists("./wineQualityReds.csv")) {
download.file(URL, destfile = "./wineQualityReds.csv", method="auto")
if (!file.exists("./wineQualityReds.csv")) {
download.file(URL, destfile = "./wineQualityReds.csv", method="auto")
URL <- "https://s3.amazonaws.com/udacity-hosted-downloads/ud651/wineQualityReds.csv"
if (!file.exists("./wineQualityReds.csv")) {
download.file(URL, destfile = "./wineQualityReds.csv", method="auto")
if (!file.exists("./wineQualityReds.csv")) {
download.file(URL, destfile = "./wineQualityReds.csv", method="auto")
}
download.file(URL, destfile = "./wineQualityReds.csv", method="auto")
wines <- read.csv("wineQualityReds.csv")
summary(wines)
install.packages("tidyverse")
install.packages("funModeling")
install.packages("Hmisc")
library(Hmisc)
library(tidyverse)
library(tidyverse)
library("tidyverse")
install.packages("tidyverse")
install.packages("Hmisc")
library("Hmisc", lib.loc="~/R/win-library/3.5")
install.packages(c("assertthat", "backports", "BH", "broom", "caTools", "cli", "curl", "dbplyr", "digest", "dplyr", "evaluate", "fansi", "forcats", "glue", "haven", "highr", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "later", "lattice", "lazyeval", "markdown", "mime", "mongolite", "nlme", "odbc", "openssl", "packrat", "pillar", "pkgconfig", "purrr", "R6", "Rcpp", "RCurl", "readr", "readxl", "rJava", "RJSONIO", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "sparklyr", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "tinytex", "xfun", "xtable"), lib="D:/Anaconda3/envs/rstudio/lib/R/library")
install.packages(c("assertthat", "backports", "BH", "broom", "caTools", "cli", "curl", "dbplyr", "digest", "dplyr", "evaluate", "fansi", "forcats", "glue", "haven", "highr", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "later", "lattice", "lazyeval", "markdown", "mime", "mongolite", "nlme", "odbc", "openssl", "packrat", "pillar", "pkgconfig", "purrr", "R6", "Rcpp", "RCurl", "readr", "readxl", "rJava", "RJSONIO", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "sparklyr", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "tinytex", "xfun", "xtable"), lib = "D:/Anaconda3/envs/rstudio/lib/R/library")
install.packages(c("assertthat", "backports", "BH", "broom", "caTools", "cli", "curl", "dbplyr", "digest", "dplyr", "evaluate", "fansi", "forcats", "glue", "haven", "highr", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "later", "lattice", "lazyeval", "markdown", "mime", "mongolite", "nlme", "odbc", "openssl", "packrat", "pillar", "pkgconfig", "purrr", "R6", "Rcpp", "RCurl", "readr", "readxl", "rJava", "RJSONIO", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "sparklyr", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "tinytex", "xfun", "xtable"), lib = "D:/Anaconda3/envs/rstudio/lib/R/library")
install.packages(c("assertthat", "backports", "BH", "broom", "caTools", "cli", "curl", "dbplyr", "digest", "dplyr", "evaluate", "fansi", "forcats", "glue", "haven", "highr", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "later", "lattice", "lazyeval", "markdown", "mime", "mongolite", "nlme", "odbc", "openssl", "packrat", "pillar", "pkgconfig", "purrr", "R6", "Rcpp", "RCurl", "readr", "readxl", "rJava", "RJSONIO", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "sparklyr", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "tinytex", "xfun", "xtable"), lib = "D:/Anaconda3/envs/rstudio/lib/R/library")
install.packages(c("assertthat", "backports", "BH", "broom", "caTools", "cli", "curl", "dbplyr", "digest", "dplyr", "evaluate", "fansi", "forcats", "glue", "haven", "highr", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "later", "lattice", "lazyeval", "markdown", "mime", "mongolite", "nlme", "odbc", "openssl", "packrat", "pillar", "pkgconfig", "purrr", "R6", "Rcpp", "RCurl", "readr", "readxl", "rJava", "RJSONIO", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "sparklyr", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "tinytex", "xfun", "xtable"), lib = "D:/Anaconda3/envs/rstudio/lib/R/library")
installed.packages(lattice)
install.packages("lattice")
install.packages("lattice")
install.packages('stringi')
install.packages('Hmisc')
library("Hmisc")
install.packages("checkmate")
library("Hmisc")
install.packages("checkmate", lib="D:/Anaconda3/envs/rstudio/lib/R/library")
install.packages("Hmisc", lib="D:/Anaconda3/envs/rstudio/lib/R/library")
install.packages("tidyverse", lib="D:/Anaconda3/envs/rstudio/lib/R/library")
install.packages("funModeling", lib="D:/Anaconda3/envs/rstudio/lib/R/library")
install.packages("nlme", lib="D:/Anaconda3/envs/rstudio/lib/R/library")
install.packages("nlme", lib="D:/Anaconda3/envs/rstudio/lib/R/library")
install.packages("nlme", lib="D:/Anaconda3/envs/rstudio/lib/R/library")
basic_eda <- function(wines)
{
glimpse(wines)
df_status(wines)
freq(wines)
profiling_num(wines)
plot_num(wines)
describe(wines)
}
basic_eda(wines)
library("funModeling")
library("tidyverse")
library("Hmisc")
basic_eda(wines)
feq(wines)
freq(wines)
plot_num(wines)
glimpse(wines)
df_status(wines)
profiling_num(wines)
describe(wines)
knitr::opts_chunk$set(echo = TRUE)
# URL for data source
URL <- "https://s3.amazonaws.com/udacity-hosted-downloads/ud651/wineQualityReds.csv"
# If data set not downloaded already, fetch it
if (!file.exists("./wineQualityReds.csv")) {
download.file(URL, destfile = "./wineQualityReds.csv", method="auto")
}
# load dataset to the work enviroment
wines <- read.csv("wineQualityReds.csv")
#Load packages
library("funModeling")
library("tidyverse")
library("Hmisc")
# Create a function nmaed explainCombined that call 5 different explortory data analysis finctions in one call
explainCombined <- function(wines)
{
glimpse(wines)
df_status(wines)
profiling_num(wines)
describe(wines)
plot_num(wines)
}
#use the function created above
explainCombined(wines)
plot(pressure)
top_n(wines[wines$quality], 10)
top <- top_n(wines[wines$quality], 10)
plot_num(top)
top <- top_n(wines$quality, 10)
top <- wines[wines$quality == 10]
top
top <- head(sort(wines$quality, decreasing=TRUE), n = 10)
top
plot_num(top)
top <- head(sort(wines, decreasing=TRUE), n = 10)
top <- head(sort(wines$quality), n = 10)
top
top <- head(sort(wines$quality, decreasing=TRUE), n = 10)
top
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
top <- wines %>% filter(rank(desc(quality))<=10)
top
library("funModeling")
library("tidyverse")
library("Hmisc")
plot_num(top)
View(basic_eda)
knitr::opts_chunk$set(echo = TRUE)
# URL for data source
URL <- "https://s3.amazonaws.com/udacity-hosted-downloads/ud651/wineQualityReds.csv"
# If data set not downloaded already, fetch it
if (!file.exists("./wineQualityReds.csv")) {
download.file(URL, destfile = "./wineQualityReds.csv", method="auto")
}
# load dataset to the work enviroment
wines <- read.csv("wineQualityReds.csv")
#Load packages
library("funModeling")
library("tidyverse")
library("Hmisc")
library("dplyr")
# Create a function nmaed explainCombined that call 5 different explortory data analysis finctions in one call
explainCombined <- function(wines)
{
glimpse(wines)
df_status(wines)
profiling_num(wines)
describe(wines)
plot_num(wines)
}
#use the function created above
explainCombined(wines)
top <- wines %>% filter(rank(desc(quality))<=10)
plot_num(top)
top_n(10, wines$quality)
top_n(n = 10, wines$quality)
library(plyr)
head(arrange(wines, desc(quality)), n = 10)
library(ggplot2)
ggplot( mtcars , aes(x=mpg, y=wt )) + geom_point() +  facet_wrap(~cyl)
ggplot( mtcars , aes(x=mpg, y=wt )) + geom_point() +  facet_wrap(~cyl , scales="fixed" )
ggplot( mtcars , aes(x=mpg, y=wt )) + geom_point() +  facet_wrap(~cyl , scales="fixed" )
ggplot( mtcars , aes(x=mpg, y=wt )) + geom_point() +  facet_grid( cyl ~ gear)
plotlyM(wines)
library(Hmisc)
plotlyM(wines)
plotar(wines)
plotar(wines, target = "quality", plot_type = "boxplot")
plotar(wines, target = "quality", plot_type = "histdens")
library(lattice)
xyplot(citric.acid ~ volatile.acidity | quality, data = wines )
xyplot(citric.acid | quality, data = wines )
plot(wines, pch=13)
plot(wines)
p <- ggplot(data = wines, aes(x= residual.sugar, y= quality)) + geom_point(aes(text = paste("Alcohol:", alcohol)), size =4)+facet_wrap(~ quality)
p
p <- ggplot(data = wines, aes(x= residual.sugar, y= alcohol)) + geom_point(aes(text = paste("Alcohol:", alcohol)), size =4)+facet_wrap(~ quality)
p
p <- ggplot(data = wines, aes(x= pH, y= alcohol)) + geom_point(aes(text = paste("Alcohol:", alcohol)), size =4)+facet_wrap(~ quality)
p
cor(wines)
library(pysch)
install.packages("psych")
library(psych)
pairs.panels(wines[,1:])
pairs.panels(wines[1:])
pairs.panels(wines[1:13])
pairs.panels(wines[2:13])
library(corrplot)
install.packages("corrplot")
library(corrplot)
p <- cor(wines[2:13])
corrplot(p, type = "upper", order = "hclust")
corrplot(p, type = "upper", order = "full")
corrplot(p, type = "full", order = "hclust")
corrplot(p, type = "lower", order = "hclust")
pairs.panels(wines[2:13])
library(knitr)
library(kableExtra)
install.packages("kableExtra")
install.packages("plotly")
top %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, end = 0.9),
font_size = spec_font_size(x))
}) %>%
mutate(quality = cell_spec(
quality, color = "white", bold = T,
background = spec_color(1:10, end = 0.9, option = "A", direction = -1)
)) %>%
kable(escape = F, align = "c") %>%
kable_styling(c("striped", "condensed"), full_width = F)
View(top)
top %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, end = 0.9),
font_size = spec_font_size(x))
}) %>%
mutate(quality = cell_spec(
quality, color = "white", bold = T,
background = spec_color(1:10, end = 0.9, option = "A", direction = -1)
)) %>%
kable(escape = F, align = "c") %>%
kable_styling(c("striped", "condensed"), full_width = F)
library(kableExtra)
top %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, end = 0.9),
font_size = spec_font_size(x))
}) %>%
mutate(quality = cell_spec(
quality, color = "white", bold = T,
background = spec_color(1:10, end = 0.9, option = "A", direction = -1)
)) %>%
kable(escape = F, align = "c") %>%
kable_styling(c("striped", "condensed"), full_width = F)
plotar(wines[2:13])
plotar(wines[2:13], "boxplot")
plotar(wines[2:13], plot_type =  "boxplot")
plotar(date = wines[2:13], target = quality, plot_type =  "boxplot")
plotar(data = wines[2:13], target = quality, plot_type =  "boxplot")
plotar(wines, target = quality, plot_type =  "boxplot")
plotar(data=wines, target = "quality", plot_type =  "boxplot")
knitr::opts_chunk$set(echo = TRUE)
# URL for data source
URL <- "https://s3.amazonaws.com/udacity-hosted-downloads/ud651/wineQualityReds.csv"
# If data set not downloaded already, fetch it
if (!file.exists("./wineQualityReds.csv")) {
download.file(URL, destfile = "./wineQualityReds.csv", method="auto")
}
# load dataset to the work enviroment
wines <- read.csv("wineQualityReds.csv")
#Load packages
library("funModeling")
knitr::opts_chunk$set(echo = TRUE)
# URL for data source
URL <- "https://s3.amazonaws.com/udacity-hosted-downloads/ud651/wineQualityReds.csv"
# If data set not downloaded already, fetch it
if (!file.exists("./wineQualityReds.csv")) {
download.file(URL, destfile = "./wineQualityReds.csv", method="auto")
}
# load dataset to the work enviroment
wines <- read.csv("wineQualityReds.csv")
#Load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(funModeling, tidyverse, Hmisc,dplyr,ggplot2,corrplot,knitr, kableExtra, psych,plotly)
knitr::opts_chunk$set(echo = TRUE)
# URL for data source
URL <- "https://s3.amazonaws.com/udacity-hosted-downloads/ud651/wineQualityReds.csv"
# If data set not downloaded already, fetch it
if (!file.exists("./wineQualityReds.csv")) {
download.file(URL, destfile = "./wineQualityReds.csv", method="auto")
}
# load dataset to the work enviroment
wines <- read.csv("wineQualityReds.csv")
#Load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(funModeling, tidyverse, Hmisc,dplyr,ggplot2,corrplot,knitr, kableExtra, psych,plotly)
glimpse(wines) #gives a quick look into the data frame
install.packages(c("corrplot", "funModeling", "kableExtra", "pacman", "tidyverse"))
install.packages(c("corrplot", "funModeling", "kableExtra", "pacman", "tidyverse"))
install.packages("rmarkdown")
library(rmarkdown)
getOption("repos")
chooseCRANmirror()
getOption("repos")
install.packages(c("assertthat", "backports", "broom", "callr", "caret", "checkmate", "cli", "clipr", "colorspace", "data.table", "dbplyr", "ddalpha", "devtools", "e1071", "fs", "funModeling", "geometry", "ggplot2", "git2r", "glue", "gplots", "gtable", "gtools", "highr", "httpuv", "ipred", "ISOcodes", "kableExtra", "knitr", "lazyeval", "leaflet", "lme4", "lubridate", "mapproj", "maps", "maptools", "markdown", "matrixStats", "mime", "ModelMetrics", "modelr", "modeltools", "multcomp", "munsell", "network", "nloptr", "NLP", "openssl", "openxlsx", "packrat", "pander", "party", "pkgbuild", "pkgconfig", "plogr", "plotly", "processx", "prodlim", "psych", "purrr", "quanteda", "quantreg", "R6", "randomForest", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppRoll", "RCurl", "readr", "readxl", "recipes", "remotes", "reprex", "reshape", "reticulate", "RgoogleMaps", "rio", "rJava", "rjson", "RJSONIO", "rlang", "rmarkdown", "RMySQL", "robustbase", "rpart.plot", "rprojroot", "rsconnect", "RSpectra", "RSQLite", "rstudioapi", "rvest", "RWeka", "RWekajars", "sandwich", "scales", "selectr", "sfsmisc", "shiny", "shinythemes", "slam", "snow", "SnowballC", "sourcetools", "sp", "spacyr", "stringdist", "stringi", "stringr", "swirl", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tidytext", "timeDate", "tinytex", "tm", "tokenizers", "usethis", "UsingR", "viridis", "viridisLite", "webshot", "withr", "wordcloud", "xfun", "xlsx", "XML", "xml2", "xtable", "yaml", "zip", "zoo"))
install.packages(c("assertthat", "backports", "broom", "callr", "caret", "checkmate", "cli", "clipr", "colorspace", "data.table", "dbplyr", "ddalpha", "devtools", "e1071", "fs", "funModeling", "geometry", "ggplot2", "git2r", "glue", "gplots", "gtable", "gtools", "highr", "httpuv", "ipred", "ISOcodes", "kableExtra", "knitr", "lazyeval", "leaflet", "lme4", "lubridate", "mapproj", "maps", "maptools", "markdown", "matrixStats", "mime", "ModelMetrics", "modelr", "modeltools", "multcomp", "munsell", "network", "nloptr", "NLP", "openssl", "openxlsx", "packrat", "pander", "party", "pkgbuild", "pkgconfig", "plogr", "plotly", "processx", "prodlim", "psych", "purrr", "quanteda", "quantreg", "R6", "randomForest", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppRoll", "RCurl", "readr", "readxl", "recipes", "remotes", "reprex", "reshape", "reticulate", "RgoogleMaps", "rio", "rJava", "rjson", "RJSONIO", "rlang", "rmarkdown", "RMySQL", "robustbase", "rpart.plot", "rprojroot", "rsconnect", "RSpectra", "RSQLite", "rstudioapi", "rvest", "RWeka", "RWekajars", "sandwich", "scales", "selectr", "sfsmisc", "shiny", "shinythemes", "slam", "snow", "SnowballC", "sourcetools", "sp", "spacyr", "stringdist", "stringi", "stringr", "swirl", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tidytext", "timeDate", "tinytex", "tm", "tokenizers", "usethis", "UsingR", "viridis", "viridisLite", "webshot", "withr", "wordcloud", "xfun", "xlsx", "XML", "xml2", "xtable", "yaml", "zip", "zoo"))
install.packages(c("assertthat", "backports", "broom", "callr", "caret", "checkmate", "cli", "clipr", "colorspace", "data.table", "dbplyr", "ddalpha", "devtools", "e1071", "fs", "funModeling", "geometry", "ggplot2", "git2r", "glue", "gplots", "gtable", "gtools", "highr", "httpuv", "ipred", "ISOcodes", "kableExtra", "knitr", "lazyeval", "leaflet", "lme4", "lubridate", "mapproj", "maps", "maptools", "markdown", "matrixStats", "mime", "ModelMetrics", "modelr", "modeltools", "multcomp", "munsell", "network", "nloptr", "NLP", "openssl", "openxlsx", "packrat", "pander", "party", "pkgbuild", "pkgconfig", "plogr", "plotly", "processx", "prodlim", "psych", "purrr", "quanteda", "quantreg", "R6", "randomForest", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppRoll", "RCurl", "readr", "readxl", "recipes", "remotes", "reprex", "reshape", "reticulate", "RgoogleMaps", "rio", "rJava", "rjson", "RJSONIO", "rlang", "rmarkdown", "RMySQL", "robustbase", "rpart.plot", "rprojroot", "rsconnect", "RSpectra", "RSQLite", "rstudioapi", "rvest", "RWeka", "RWekajars", "sandwich", "scales", "selectr", "sfsmisc", "shiny", "shinythemes", "slam", "snow", "SnowballC", "sourcetools", "sp", "spacyr", "stringdist", "stringi", "stringr", "swirl", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tidytext", "timeDate", "tinytex", "tm", "tokenizers", "usethis", "UsingR", "viridis", "viridisLite", "webshot", "withr", "wordcloud", "xfun", "xlsx", "XML", "xml2", "xtable", "yaml", "zip", "zoo"))
install.packages("Hmisc")
install.packages("funModeling")
install.packages("bindrcpp")
install.packages("funModeling")
detach("package:base", unload = TRUE)
chooseCRANmirror()
install.packages("rmarkdown")
install.packages(c("corrplot", "dplyr", "funModeling", "ggplot2", "Hmisc", "kableExtra", "knitr", "plotly", "plyr", "psych", "tidyverse"))
install.packages(c("corrplot", "dplyr", "funModeling", "ggplot2", "Hmisc", "kableExtra", "knitr", "plotly", "plyr", "psych", "tidyverse"))
install.packages(c("corrplot", "dplyr", "funModeling", "ggplot2", "Hmisc", "kableExtra", "knitr", "plotly", "plyr", "psych", "tidyverse"))
install.packages(c("MASS", "RUnit"), lib="C:/Program Files/Microsoft/R Client/R_SERVER/library")
unlink('Red Wine Quality Exploratory Data Analysis_cache', recursive = TRUE)
install.packages("pandocfilters")
